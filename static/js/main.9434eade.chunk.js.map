{"version":3,"sources":["style.tsx","components/MaskedInput.tsx","App.tsx","Helper.tsx","index.tsx"],"names":["theme","createMuiTheme","overrides","MuiSvgIcon","root","fontSize","color","fixWarn","unstable_createMuiStrictModeTheme","responsiveFontSizes","factor","useStyles","makeStyles","background","height","heading","marginBottom","timer","padding","borderRadius","card","form","margin","input","width","icon","regEx","MaskedInput","inputRef","other","ref","inputElement","mask","App","interval","useRef","classes","useState","time","setTime","click","setClick","totalSeconds","convTime","split","parseInt","timeToNumber","CssBaseline","ThemeProvider","Box","display","flexDirection","justifyContent","alignItems","component","className","Typography","variant","Card","CardContent","m","FormControl","Fade","in","timeout","Input","type","value","inputComponent","onChange","e","timeFormat","target","IconButton","aria-label","onClick","clearInterval","current","window","setInterval","alert","num","seconds","minutes","Math","floor","numberToTime","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8SAEIA,EAAQC,YAAe,CACvBC,UAAU,CACNC,WAAW,CACPC,KAAK,CACDC,SAAU,wBACVC,MAAO,YAKnBC,EAAUC,cACdR,EAAQS,YAAoBT,EAAO,CAACU,OAAQ,IAKrC,IAAMC,EAAYC,YAAW,CAChCR,KAAM,CACFS,WAAY,UACZC,OAAQ,SAEZC,QAAQ,CACJT,MAAO,UACPU,aAAc,QAElBC,MAAM,CACFJ,WAAY,UACZK,QAAS,cACTC,aAAc,OAElBC,KAAM,CACFP,WAAY,UACZM,aAAc,IAElBE,KAAK,CACDC,OAAQ,oBAEZC,MAAM,CACFT,OAAQ,yBACRT,SAAU,yBACVmB,MAAM,0BAGVC,KAAK,K,oFCzCHC,EAAoB,CAAC,KAAK,KAAK,IAAI,QAAQ,MAkBlCC,MAhBf,YAAiD,IAA3BC,EAA0B,EAA1BA,SAAaC,EAAa,4BAC5C,OACI,cAAC,IAAD,2BACQA,GADR,IAEIC,IAAK,SAAAA,GACDF,EAASE,EAAMA,EAAIC,aAAe,OAEtCC,KAAMN,MC8FHO,EAtFH,WAER,IAAIC,EAAWC,iBAAO,GAEhBC,EAAUzB,IAJF,EAMU0B,mBAAS,SANnB,mBAMPC,EANO,KAMDC,EANC,OAOYF,oBAAS,GAPrB,mBAOPG,EAPO,KAOAC,EAPA,KASVC,EC7BoB,SAACJ,GACzB,IAAIK,EAA0BL,EAAKM,MAAM,KAGzC,OAAiB,GAFKC,SAASF,EAAS,GAAI,KACtBA,EAAS,GAAKE,SAASF,EAAS,GAAI,IAAM,GD0B7CG,CAAaR,GA0BhC,OACI,qCACI,cAACS,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAehD,MAAOO,EAAtB,SACI,cAACyC,EAAA,EAAD,CAAehD,MAAOA,EAAtB,SACI,eAACiD,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAC7BC,eAAe,SACfC,WAAW,SACXC,UAAU,UACVC,UAAWnB,EAAQhC,KAJxB,UAKI,cAACoD,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,KAAKC,UAAWnB,EAAQrB,QAA3D,kCAEA,cAAC2C,EAAA,EAAD,CAAMH,UAAWnB,EAAQhB,KAAMkC,UAAU,UAAzC,SACI,cAACK,EAAA,EAAD,UACI,eAACV,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASC,eAAe,SAASC,WAAW,SACzEO,EAAG,EADR,UAEI,cAACJ,EAAA,EAAD,CAAYC,QAAQ,KAAKH,UAAU,KAAKC,UAAWnB,EAAQnB,MAA3D,SACc,KAATqB,EAAc,QAAUA,IAE7B,cAACuB,EAAA,EAAD,CAAaN,UAAWnB,EAAQf,KAAMiC,UAAU,OAAhD,SAEI,cAACQ,EAAA,EAAD,CAAMC,IAAKvB,EAAOwB,QAAS,IAA3B,SACI,cAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,MAAO7B,EACnB8B,eAAgBzC,EAChB4B,UAAWnB,EAAQb,MACnB8C,SAAU,SAACC,GACP,IAAIC,EAAaD,EAAEE,OAAOL,MAC1B5B,EAAQgC,UAK3B,eAACtB,EAAA,EAAD,WACI,cAACwB,EAAA,EAAD,CAAYC,aAAW,aAAanB,UAAWnB,EAAQX,KAAMkD,QA1D9E,WACflC,GAAUD,GACLA,GAA0B,IAAjBE,GAYVD,GAAS,GACTmC,cAAc1C,EAAS2C,UAZvB3C,EAAS2C,QAAUC,OAAOC,aAAY,WAC9BrC,EAAe,EACfA,GAA8B,GAE9BkC,cAAc1C,EAAS2C,SACvBpC,GAAS,GACTuC,MAAM,kBAEVzC,EClCY,SAAC0C,GACzB,IAAIC,EAAkBD,EAAM,GACxBE,EAAkBC,KAAKC,MAAMJ,EAAM,IACvC,MAAM,GAAN,OAAUE,EAAU,GAAV,WAAmBA,GAAYA,EAAzC,YAAoDD,EAAU,GAAV,WAAmBA,GAAYA,GD+B/DI,CAAa5C,MACtB,MA8CyB,SACKF,EAAQ,cAAC,IAAD,IACL,cAAC,IAAD,MAER,cAACiC,EAAA,EAAD,CAAYC,aAAW,QAAQnB,UAAWnB,EAAQX,KAAMkD,QA3CxE,WAChBpC,EAAQ,SACRE,GAAS,GACTmC,cAAc1C,EAAS2C,UAwCS,SACI,cAAC,IAAD,2BE1F5CU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9434eade.chunk.js","sourcesContent":["import {makeStyles, createMuiTheme, responsiveFontSizes, unstable_createMuiStrictModeTheme} from '@material-ui/core/styles';\r\n\r\nlet theme = createMuiTheme({\r\n    overrides:{\r\n        MuiSvgIcon:{\r\n            root:{\r\n                fontSize: \"clamp(2rem, 5vw,3rem)\",\r\n                color: \"#000\"\r\n            }\r\n        }\r\n    }\r\n});\r\nlet fixWarn = unstable_createMuiStrictModeTheme();\r\ntheme = responsiveFontSizes(theme, {factor: 3});\r\nexport {theme,fixWarn};\r\n\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    root: {\r\n        background: \"#032b43\",\r\n        height: \"100vh\"\r\n    },\r\n    heading:{\r\n        color: \"#e5e4e4\",\r\n        marginBottom: \"3rem\"\r\n    },\r\n    timer:{\r\n        background: \"#808080\",\r\n        padding: \"2rem 3.2rem\",\r\n        borderRadius: \"8px\"\r\n    },\r\n    card: {\r\n        background: \"#e5e4e4\",\r\n        borderRadius: 20,\r\n    },\r\n    form:{\r\n        margin: \"2rem auto 1.5rem\"\r\n    },\r\n    input:{\r\n        height: \"clamp(2.5rem,4vh,4rem)\",\r\n        fontSize: \"clamp(1.5rem,3vw,2rem)\",\r\n        width:\"clamp(4rem,8vw,5.2rem)\",\r\n\r\n    },\r\n    icon:{\r\n\r\n    }\r\n});","import React from 'react';\r\nimport Masked from \"react-text-mask\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst regEx: Array<any> = [/\\d/,/\\d/,':',/[0-5]/,/\\d/];\r\n\r\nfunction MaskedInput({inputRef, ...other}: any) {\r\n    return (\r\n        <Masked\r\n            {...other}\r\n            ref={ref => {\r\n                inputRef(ref ? ref.inputElement : null);\r\n            }}\r\n            mask={regEx}\r\n        />\r\n    );\r\n}\r\n\r\nMaskedInput.propTypes = {\r\n    inputRef: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MaskedInput;\r\n","import React, {useRef, useState} from 'react';\nimport {\n    CssBaseline,\n    Box,\n    Card,\n    CardContent,\n    IconButton,\n    Typography,\n    Input,\n    FormControl,\n    Fade,\n    ThemeProvider\n} from '@material-ui/core'\nimport {useStyles, theme, fixWarn} from \"./style\";\nimport {timeToNumber, numberToTime} from './Helper'\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport MaskedInput from \"./components/MaskedInput\";\n\n\nconst App = () => {\n    //Necessary to clear the interval\n    let interval = useRef(0);\n    //Set Styles Here\n    const classes = useStyles();\n    //Set Initial States Using Hooks\n    const [time, setTime] = useState(\"00:00\")\n    const [click, setClick] = useState(false)\n\n    let totalSeconds = timeToNumber(time)\n    const handlePlay = () => {\n        setClick(!click)\n        if (!click && totalSeconds !== 0) {\n            interval.current = window.setInterval(() => {\n                if (totalSeconds > 0) {\n                    totalSeconds = totalSeconds - 1;\n                } else {\n                    clearInterval(interval.current)\n                    setClick(false)\n                    alert(\"Time is up!!!\")\n                }\n                setTime(numberToTime(totalSeconds))\n            }, 1000)\n        } else {\n            setClick(false)\n            clearInterval(interval.current)\n        }\n    }\n\n    const handleReset = () => {\n        setTime(\"00:00\");\n        setClick(false)\n        clearInterval(interval.current)\n    }\n\n    return (\n        <>\n            <CssBaseline/>\n            <ThemeProvider theme={fixWarn}>\n                <ThemeProvider theme={theme}>\n                    <Box display=\"flex\" flexDirection=\"column\"\n                         justifyContent=\"center\"\n                         alignItems=\"center\"\n                         component=\"section\"\n                         className={classes.root}>\n                        <Typography variant=\"h3\" component=\"h1\" className={classes.heading}>Simple Cooking\n                            Alarm</Typography>\n                        <Card className={classes.card} component=\"section\">\n                            <CardContent>\n                                <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\"\n                                     m={3}>\n                                    <Typography variant=\"h1\" component=\"h2\" className={classes.timer}>\n                                        {time === '' ? \"00:00\" : time}\n                                    </Typography>\n                                    <FormControl className={classes.form} component=\"form\">\n\n                                        <Fade in={!click} timeout={800}>\n                                            <Input type=\"text\" value={time}\n                                                   inputComponent={MaskedInput}\n                                                   className={classes.input}\n                                                   onChange={(e: any) => {\n                                                       let timeFormat = e.target.value;\n                                                       setTime(timeFormat);\n                                                   }}/>\n                                        </Fade>\n\n                                    </FormControl>\n                                    <Box>\n                                        <IconButton aria-label=\"play-pause\" className={classes.icon} onClick={handlePlay}>\n                                            {click ? <PauseCircleOutlineIcon /> :\n                                                <PlayCircleOutlineIcon />}\n                                        </IconButton>\n                                        <IconButton aria-label=\"reset\" className={classes.icon} onClick={handleReset}>\n                                            <RotateLeftIcon />\n                                        </IconButton>\n                                    </Box>\n                                </Box>\n                            </CardContent>\n                        </Card>\n                    </Box>\n                </ThemeProvider>\n            </ThemeProvider>\n        </>\n    );\n}\n\nexport default App;\n","//Convert time-string input to number\r\nexport const timeToNumber = (time: string) => {\r\n    let convTime: Array<string> = time.split(\":\");\r\n    let minutes: number = parseInt(convTime[0], 10);\r\n    let seconds: number = convTime[1] ? parseInt(convTime[1], 10) : 0;\r\n    return minutes * 60 + seconds;\r\n}\r\n//Convert number to time-string for re-render\r\nexport const numberToTime = (num: number) => {\r\n    let seconds: number = num % 60;\r\n    let minutes: number = Math.floor(num / 60);\r\n    return `${minutes < 10 ? `0${minutes}` : minutes}:${seconds < 10 ? `0${seconds}` : seconds}`\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}